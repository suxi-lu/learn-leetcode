buildscript {
    repositories {
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
        maven{ url 'http://maven.aliyun.com/nexus/content/repositories/jcenter'}
        maven { url "https://repo.spring.io/plugins-release" }
    }
    dependencies {
        classpath("io.spring.gradle:propdeps-plugin:0.0.9.RELEASE")
        classpath("org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.16")
    }
}

// 3rd party plugin repositories can be configured in settings.gradle
plugins {
    id "io.spring.dependency-management" version "1.0.7.RELEASE" apply false
    id "org.jetbrains.kotlin.jvm" version "1.3.31" apply false
    id "org.jetbrains.dokka" version "0.9.18"
    id "org.asciidoctor.convert" version "1.5.8"
}

allprojects {
    repositories {
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
        maven{ url 'http://maven.aliyun.com/nexus/content/repositories/jcenter'}
    }
}

ext {
    aspectjVersion       = "1.9.3"
    coroutinesVersion    = "1.2.1"
    freemarkerVersion    = "2.3.28"
    groovyVersion        = "2.5.7"
    hsqldbVersion        = "2.4.1"
    jackson2Version      = "2.9.9"
    jettyVersion         = "9.4.18.v20190429"
    junit5Version        = "5.5.0-RC1"
    kotlinVersion        = "1.3.31"
    log4jVersion         = "2.11.2"
    nettyVersion         = "4.1.36.Final"
    reactorVersion       = "Dysprosium-M2"
    rsocketVersion       = "0.12.2-RC4"
    rxjavaVersion        = "1.3.8"
    rxjavaAdapterVersion = "1.2.1"
    rxjava2Version       = "2.2.9"
    slf4jVersion         = "1.7.26"	  // spring-jcl + consistent 3rd party deps
    tiles3Version        = "3.0.8"
    tomcatVersion        = "9.0.21"
    undertowVersion      = "2.0.21.Final"
}

configure(allprojects) { project ->
    group = "com.learn"
    version = version

    apply plugin: "java"
    apply plugin: "kotlin"
    apply plugin: "checkstyle"
    apply plugin: "propdeps"
    //apply plugin: "test-source-set-dependencies"
    apply plugin: "io.spring.dependency-management"

    dependencyManagement {
        resolutionStrategy {
            cacheChangingModulesFor 0, "seconds"
        }
        applyMavenExclusions = false
        generatedPomCustomization {
            enabled = false
        }
    }

    configurations.all {
        // Check for updates every build
        resolutionStrategy.cacheChangingModulesFor 0, "seconds"
    }

    def commonCompilerArgs =
            ["-Xlint:serial", "-Xlint:cast", "-Xlint:classfile", "-Xlint:dep-ann",
             "-Xlint:divzero", "-Xlint:empty", "-Xlint:finally", "-Xlint:overrides",
             "-Xlint:path", "-Xlint:processing", "-Xlint:static", "-Xlint:try", "-Xlint:-options"]

    compileJava.options*.compilerArgs = commonCompilerArgs +
            ["-Xlint:varargs", "-Xlint:fallthrough", "-Xlint:rawtypes",
             "-Xlint:deprecation", "-Xlint:unchecked", "-Werror"]

    compileTestJava.options*.compilerArgs = commonCompilerArgs +
            ["-Xlint:-varargs", "-Xlint:-fallthrough", "-Xlint:-rawtypes",
             "-Xlint:-deprecation", "-Xlint:-unchecked"]

    compileJava {
        sourceCompatibility = 1.8  // can be switched to 11 for testing
        targetCompatibility = 1.8
        options.encoding = "UTF-8"
    }

    compileTestJava {
        sourceCompatibility = 1.8  // can be switched to 11 for testing
        targetCompatibility = 1.8
        options.encoding = "UTF-8"
        options.compilerArgs += "-parameters"
    }

    compileKotlin {
        kotlinOptions {
            jvmTarget = "1.8"
            freeCompilerArgs = ["-Xjsr305=strict"]
        }
    }

    compileTestKotlin {
        kotlinOptions {
            jvmTarget = "1.8"
            freeCompilerArgs = ["-Xjsr305=strict"]
        }
    }

    test {
        systemProperty("java.awt.headless", "true")
        systemProperty("testGroups", project.properties.get("testGroups"))
        systemProperty("io.netty.leakDetection.level", "paranoid")
        scanForTestClasses = false
        include(["**/*Tests.class", "**/*Test.class"])
        // Since we set scanForTestClasses to false, we need to filter out inner
        // classes with the "$" pattern; otherwise, using -Dtest.single=MyTests to
        // run MyTests by itself will fail if MyTests contains any inner classes.
        exclude(["**/Abstract*.class", '**/*$*'])
        reports.junitXml.setDestination(file("$buildDir/test-results"))
    }

    checkstyle {
        toolVersion = "8.21"
        configDir = rootProject.file("src/checkstyle")
    }

    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/libs-release" }
        maven { url "https://repo.spring.io/milestone" } // Reactor
        mavenLocal()
    }

    dependencies {
        testCompile("junit:junit:4.13-beta-3") {
            exclude group: "org.hamcrest", module: "hamcrest-core"
        }
        testCompile("org.mockito:mockito-core:2.28.2") {
            exclude group: "org.hamcrest", module: "hamcrest-core"
        }
        testCompile("io.mockk:mockk:1.9.3")
        testCompile("org.hamcrest:hamcrest-all:1.3")
        testCompile("org.assertj:assertj-core:3.12.2")
        testRuntime("org.apache.logging.log4j:log4j-core:${log4jVersion}")
        testRuntime("org.apache.logging.log4j:log4j-slf4j-impl:${log4jVersion}")
        testRuntime("org.apache.logging.log4j:log4j-jul:${log4jVersion}")
        // JSR-305 only used for non-required meta-annotations
        compileOnly("com.google.code.findbugs:jsr305:3.0.2")
        testCompileOnly("com.google.code.findbugs:jsr305:3.0.2")
        checkstyle("io.spring.javaformat:spring-javaformat-checkstyle:0.0.7")
    }

}
